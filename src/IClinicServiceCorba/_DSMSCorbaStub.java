package IClinicServiceCorba;


/**
* IClinicServiceCorba/_DSMSCorbaStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from IClinicServiceCorba.idl
* Wednesday, June 22, 2016 5:13:48 PM EDT
*/

public class _DSMSCorbaStub extends org.omg.CORBA.portable.ObjectImpl implements IClinicServiceCorba.DSMSCorba
{

  public void createDoctorRecord (String firstName, String lastName, String address, String phone, String specialization, String location, String managerID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createDoctorRecord", false);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (address);
                $out.write_string (phone);
                $out.write_string (specialization);
                $out.write_string (location);
                $out.write_string (managerID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createDoctorRecord (firstName, lastName, address, phone, specialization, location, managerID        );
            } finally {
                _releaseReply ($in);
            }
  } // createDoctorRecord

  public void createNurseRecord (String firstName, String lastName, String designation, String status, String date, String location, String managerID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createNurseRecord", false);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (designation);
                $out.write_string (status);
                $out.write_string (date);
                $out.write_string (location);
                $out.write_string (managerID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createNurseRecord (firstName, lastName, designation, status, date, location, managerID        );
            } finally {
                _releaseReply ($in);
            }
  } // createNurseRecord

  public void editRecord (String recordID, String fieldName, String fieldValue)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editRecord", false);
                $out.write_string (recordID);
                $out.write_string (fieldName);
                $out.write_string (fieldValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                editRecord (recordID, fieldName, fieldValue        );
            } finally {
                _releaseReply ($in);
            }
  } // editRecord

  public void transferRecord (String managerID, String recordID, String remoteClinicServerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("transferRecord", false);
                $out.write_string (managerID);
                $out.write_string (recordID);
                $out.write_string (remoteClinicServerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                transferRecord (managerID, recordID, remoteClinicServerName        );
            } finally {
                _releaseReply ($in);
            }
  } // transferRecord

  public void deleteRecord (String recordID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteRecord", false);
                $out.write_string (recordID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteRecord (recordID        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteRecord

  public String getRecord ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRecord", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getRecord (        );
            } finally {
                _releaseReply ($in);
            }
  } // getRecord

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:IClinicServiceCorba/DSMSCorba:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DSMSCorbaStub
